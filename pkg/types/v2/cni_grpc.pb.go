// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CNIClient is the client API for CNI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CNIClient interface {
	ListNetworkConfig(ctx context.Context, in *ListNetworkConfigRequest, opts ...grpc.CallOption) (*ListNetworkConfigReply, error)
	ListNetworkList(ctx context.Context, in *ListNetworkListRequest, opts ...grpc.CallOption) (*ListNetworkListReply, error)
	AddNetworkList(ctx context.Context, in *AddNetworkListRequest, opts ...grpc.CallOption) (*AddNetworkListReply, error)
	CheckNetworkList(ctx context.Context, in *CheckNetworkListRequest, opts ...grpc.CallOption) (*CheckNetworkListReply, error)
	DelNetworkList(ctx context.Context, in *DelNetworkListRequest, opts ...grpc.CallOption) (*DelNetworkListReply, error)
	ValidateNetworkList(ctx context.Context, in *ValidateNetworkListRequest, opts ...grpc.CallOption) (*ValidateNetworkListReply, error)
	AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkReply, error)
	CheckNetwork(ctx context.Context, in *CheckNetworkRequest, opts ...grpc.CallOption) (*CheckNetworkReply, error)
	DelNetwork(ctx context.Context, in *DelNetworkRequest, opts ...grpc.CallOption) (*DelNetworkReply, error)
	ValidateNetwork(ctx context.Context, in *ValidateNetworkRequest, opts ...grpc.CallOption) (*ValidateNetworkReply, error)
}

type cNIClient struct {
	cc grpc.ClientConnInterface
}

func NewCNIClient(cc grpc.ClientConnInterface) CNIClient {
	return &cNIClient{cc}
}

func (c *cNIClient) ListNetworkConfig(ctx context.Context, in *ListNetworkConfigRequest, opts ...grpc.CallOption) (*ListNetworkConfigReply, error) {
	out := new(ListNetworkConfigReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/ListNetworkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) ListNetworkList(ctx context.Context, in *ListNetworkListRequest, opts ...grpc.CallOption) (*ListNetworkListReply, error) {
	out := new(ListNetworkListReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/ListNetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) AddNetworkList(ctx context.Context, in *AddNetworkListRequest, opts ...grpc.CallOption) (*AddNetworkListReply, error) {
	out := new(AddNetworkListReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/AddNetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) CheckNetworkList(ctx context.Context, in *CheckNetworkListRequest, opts ...grpc.CallOption) (*CheckNetworkListReply, error) {
	out := new(CheckNetworkListReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/CheckNetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) DelNetworkList(ctx context.Context, in *DelNetworkListRequest, opts ...grpc.CallOption) (*DelNetworkListReply, error) {
	out := new(DelNetworkListReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/DelNetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) ValidateNetworkList(ctx context.Context, in *ValidateNetworkListRequest, opts ...grpc.CallOption) (*ValidateNetworkListReply, error) {
	out := new(ValidateNetworkListReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/ValidateNetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkReply, error) {
	out := new(AddNetworkReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/AddNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) CheckNetwork(ctx context.Context, in *CheckNetworkRequest, opts ...grpc.CallOption) (*CheckNetworkReply, error) {
	out := new(CheckNetworkReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/CheckNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) DelNetwork(ctx context.Context, in *DelNetworkRequest, opts ...grpc.CallOption) (*DelNetworkReply, error) {
	out := new(DelNetworkReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/DelNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) ValidateNetwork(ctx context.Context, in *ValidateNetworkRequest, opts ...grpc.CallOption) (*ValidateNetworkReply, error) {
	out := new(ValidateNetworkReply)
	err := c.cc.Invoke(ctx, "/cni.v2.CNI/ValidateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNIServer is the server API for CNI service.
// All implementations must embed UnimplementedCNIServer
// for forward compatibility
type CNIServer interface {
	ListNetworkConfig(context.Context, *ListNetworkConfigRequest) (*ListNetworkConfigReply, error)
	ListNetworkList(context.Context, *ListNetworkListRequest) (*ListNetworkListReply, error)
	AddNetworkList(context.Context, *AddNetworkListRequest) (*AddNetworkListReply, error)
	CheckNetworkList(context.Context, *CheckNetworkListRequest) (*CheckNetworkListReply, error)
	DelNetworkList(context.Context, *DelNetworkListRequest) (*DelNetworkListReply, error)
	ValidateNetworkList(context.Context, *ValidateNetworkListRequest) (*ValidateNetworkListReply, error)
	AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkReply, error)
	CheckNetwork(context.Context, *CheckNetworkRequest) (*CheckNetworkReply, error)
	DelNetwork(context.Context, *DelNetworkRequest) (*DelNetworkReply, error)
	ValidateNetwork(context.Context, *ValidateNetworkRequest) (*ValidateNetworkReply, error)
	mustEmbedUnimplementedCNIServer()
}

// UnimplementedCNIServer must be embedded to have forward compatible implementations.
type UnimplementedCNIServer struct {
}

func (UnimplementedCNIServer) ListNetworkConfig(context.Context, *ListNetworkConfigRequest) (*ListNetworkConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkConfig not implemented")
}
func (UnimplementedCNIServer) ListNetworkList(context.Context, *ListNetworkListRequest) (*ListNetworkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkList not implemented")
}
func (UnimplementedCNIServer) AddNetworkList(context.Context, *AddNetworkListRequest) (*AddNetworkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetworkList not implemented")
}
func (UnimplementedCNIServer) CheckNetworkList(context.Context, *CheckNetworkListRequest) (*CheckNetworkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNetworkList not implemented")
}
func (UnimplementedCNIServer) DelNetworkList(context.Context, *DelNetworkListRequest) (*DelNetworkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelNetworkList not implemented")
}
func (UnimplementedCNIServer) ValidateNetworkList(context.Context, *ValidateNetworkListRequest) (*ValidateNetworkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNetworkList not implemented")
}
func (UnimplementedCNIServer) AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetwork not implemented")
}
func (UnimplementedCNIServer) CheckNetwork(context.Context, *CheckNetworkRequest) (*CheckNetworkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNetwork not implemented")
}
func (UnimplementedCNIServer) DelNetwork(context.Context, *DelNetworkRequest) (*DelNetworkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelNetwork not implemented")
}
func (UnimplementedCNIServer) ValidateNetwork(context.Context, *ValidateNetworkRequest) (*ValidateNetworkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNetwork not implemented")
}
func (UnimplementedCNIServer) mustEmbedUnimplementedCNIServer() {}

// UnsafeCNIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CNIServer will
// result in compilation errors.
type UnsafeCNIServer interface {
	mustEmbedUnimplementedCNIServer()
}

func RegisterCNIServer(s grpc.ServiceRegistrar, srv CNIServer) {
	s.RegisterService(&CNI_ServiceDesc, srv)
}

func _CNI_ListNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).ListNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/ListNetworkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).ListNetworkConfig(ctx, req.(*ListNetworkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_ListNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).ListNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/ListNetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).ListNetworkList(ctx, req.(*ListNetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_AddNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).AddNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/AddNetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).AddNetworkList(ctx, req.(*AddNetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_CheckNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).CheckNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/CheckNetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).CheckNetworkList(ctx, req.(*CheckNetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_DelNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).DelNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/DelNetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).DelNetworkList(ctx, req.(*DelNetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_ValidateNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateNetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).ValidateNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/ValidateNetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).ValidateNetworkList(ctx, req.(*ValidateNetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).AddNetwork(ctx, req.(*AddNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_CheckNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).CheckNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/CheckNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).CheckNetwork(ctx, req.(*CheckNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_DelNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).DelNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/DelNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).DelNetwork(ctx, req.(*DelNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_ValidateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).ValidateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.v2.CNI/ValidateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).ValidateNetwork(ctx, req.(*ValidateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CNI_ServiceDesc is the grpc.ServiceDesc for CNI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CNI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cni.v2.CNI",
	HandlerType: (*CNIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetworkConfig",
			Handler:    _CNI_ListNetworkConfig_Handler,
		},
		{
			MethodName: "ListNetworkList",
			Handler:    _CNI_ListNetworkList_Handler,
		},
		{
			MethodName: "AddNetworkList",
			Handler:    _CNI_AddNetworkList_Handler,
		},
		{
			MethodName: "CheckNetworkList",
			Handler:    _CNI_CheckNetworkList_Handler,
		},
		{
			MethodName: "DelNetworkList",
			Handler:    _CNI_DelNetworkList_Handler,
		},
		{
			MethodName: "ValidateNetworkList",
			Handler:    _CNI_ValidateNetworkList_Handler,
		},
		{
			MethodName: "AddNetwork",
			Handler:    _CNI_AddNetwork_Handler,
		},
		{
			MethodName: "CheckNetwork",
			Handler:    _CNI_CheckNetwork_Handler,
		},
		{
			MethodName: "DelNetwork",
			Handler:    _CNI_DelNetwork_Handler,
		},
		{
			MethodName: "ValidateNetwork",
			Handler:    _CNI_ValidateNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cni.proto",
}
