// Copyright 2019 CNI authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.0
// source: cni.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType int32

const (
	ListNetworkConfigReply_NetworkConfigNameAndType_UNIVERSAL   ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType = 0
	ListNetworkConfigReply_NetworkConfigNameAndType_CONFIG      ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType = 1
	ListNetworkConfigReply_NetworkConfigNameAndType_CONFIG_LIST ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType = 2
)

// Enum value maps for ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType.
var (
	ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType_name = map[int32]string{
		0: "UNIVERSAL",
		1: "CONFIG",
		2: "CONFIG_LIST",
	}
	ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType_value = map[string]int32{
		"UNIVERSAL":   0,
		"CONFIG":      1,
		"CONFIG_LIST": 2,
	}
)

func (x ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType) Enum() *ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType {
	p := new(ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType)
	*p = x
	return p
}

func (x ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_cni_proto_enumTypes[0].Descriptor()
}

func (ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType) Type() protoreflect.EnumType {
	return &file_cni_proto_enumTypes[0]
}

func (x ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType.Descriptor instead.
func (ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType) EnumDescriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{1, 0, 0}
}

type ListNetworkConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNetworkConfigRequest) Reset() {
	*x = ListNetworkConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworkConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkConfigRequest) ProtoMessage() {}

func (x *ListNetworkConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkConfigRequest.ProtoReflect.Descriptor instead.
func (*ListNetworkConfigRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{0}
}

type ListNetworkConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network []*ListNetworkConfigReply_NetworkConfigNameAndType `protobuf:"bytes,1,rep,name=network,proto3" json:"network,omitempty"`
}

func (x *ListNetworkConfigReply) Reset() {
	*x = ListNetworkConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworkConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkConfigReply) ProtoMessage() {}

func (x *ListNetworkConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkConfigReply.ProtoReflect.Descriptor instead.
func (*ListNetworkConfigReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{1}
}

func (x *ListNetworkConfigReply) GetNetwork() []*ListNetworkConfigReply_NetworkConfigNameAndType {
	if x != nil {
		return x.Network
	}
	return nil
}

type ValidateNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfig *NetworkConfig `protobuf:"bytes,1,opt,name=networkConfig,proto3" json:"networkConfig,omitempty"`
}

func (x *ValidateNetworkRequest) Reset() {
	*x = ValidateNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateNetworkRequest) ProtoMessage() {}

func (x *ValidateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateNetworkRequest.ProtoReflect.Descriptor instead.
func (*ValidateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateNetworkRequest) GetNetworkConfig() *NetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

type ValidateNetworkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []string `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *ValidateNetworkReply) Reset() {
	*x = ValidateNetworkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateNetworkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateNetworkReply) ProtoMessage() {}

func (x *ValidateNetworkReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateNetworkReply.ProtoReflect.Descriptor instead.
func (*ValidateNetworkReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateNetworkReply) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type ValidateNetworkListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfigList *NetworkConfigList `protobuf:"bytes,1,opt,name=networkConfigList,proto3" json:"networkConfigList,omitempty"`
}

func (x *ValidateNetworkListRequest) Reset() {
	*x = ValidateNetworkListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateNetworkListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateNetworkListRequest) ProtoMessage() {}

func (x *ValidateNetworkListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateNetworkListRequest.ProtoReflect.Descriptor instead.
func (*ValidateNetworkListRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{4}
}

func (x *ValidateNetworkListRequest) GetNetworkConfigList() *NetworkConfigList {
	if x != nil {
		return x.NetworkConfigList
	}
	return nil
}

type ValidateNetworkListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []string `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *ValidateNetworkListReply) Reset() {
	*x = ValidateNetworkListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateNetworkListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateNetworkListReply) ProtoMessage() {}

func (x *ValidateNetworkListReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateNetworkListReply.ProtoReflect.Descriptor instead.
func (*ValidateNetworkListReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{5}
}

func (x *ValidateNetworkListReply) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type DelNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfig *NetworkConfig `protobuf:"bytes,1,opt,name=networkConfig,proto3" json:"networkConfig,omitempty"`
	RuntimeConf   *RuntimeConf   `protobuf:"bytes,2,opt,name=runtimeConf,proto3" json:"runtimeConf,omitempty"`
}

func (x *DelNetworkRequest) Reset() {
	*x = DelNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelNetworkRequest) ProtoMessage() {}

func (x *DelNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelNetworkRequest.ProtoReflect.Descriptor instead.
func (*DelNetworkRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{6}
}

func (x *DelNetworkRequest) GetNetworkConfig() *NetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *DelNetworkRequest) GetRuntimeConf() *RuntimeConf {
	if x != nil {
		return x.RuntimeConf
	}
	return nil
}

type DelNetworkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelNetworkReply) Reset() {
	*x = DelNetworkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelNetworkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelNetworkReply) ProtoMessage() {}

func (x *DelNetworkReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelNetworkReply.ProtoReflect.Descriptor instead.
func (*DelNetworkReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{7}
}

type CheckNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfig *NetworkConfig `protobuf:"bytes,1,opt,name=networkConfig,proto3" json:"networkConfig,omitempty"`
	RuntimeConf   *RuntimeConf   `protobuf:"bytes,2,opt,name=runtimeConf,proto3" json:"runtimeConf,omitempty"`
}

func (x *CheckNetworkRequest) Reset() {
	*x = CheckNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNetworkRequest) ProtoMessage() {}

func (x *CheckNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNetworkRequest.ProtoReflect.Descriptor instead.
func (*CheckNetworkRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{8}
}

func (x *CheckNetworkRequest) GetNetworkConfig() *NetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *CheckNetworkRequest) GetRuntimeConf() *RuntimeConf {
	if x != nil {
		return x.RuntimeConf
	}
	return nil
}

type CheckNetworkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckNetworkReply) Reset() {
	*x = CheckNetworkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNetworkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNetworkReply) ProtoMessage() {}

func (x *CheckNetworkReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNetworkReply.ProtoReflect.Descriptor instead.
func (*CheckNetworkReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{9}
}

type AddNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfig *NetworkConfig `protobuf:"bytes,1,opt,name=networkConfig,proto3" json:"networkConfig,omitempty"`
	RuntimeConf   *RuntimeConf   `protobuf:"bytes,2,opt,name=runtimeConf,proto3" json:"runtimeConf,omitempty"`
}

func (x *AddNetworkRequest) Reset() {
	*x = AddNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNetworkRequest) ProtoMessage() {}

func (x *AddNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNetworkRequest.ProtoReflect.Descriptor instead.
func (*AddNetworkRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{10}
}

func (x *AddNetworkRequest) GetNetworkConfig() *NetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *AddNetworkRequest) GetRuntimeConf() *RuntimeConf {
	if x != nil {
		return x.RuntimeConf
	}
	return nil
}

type AddNetworkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddNetworkReply) Reset() {
	*x = AddNetworkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNetworkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNetworkReply) ProtoMessage() {}

func (x *AddNetworkReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNetworkReply.ProtoReflect.Descriptor instead.
func (*AddNetworkReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{11}
}

func (x *AddNetworkReply) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type DelNetworkListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfigList *NetworkConfigList `protobuf:"bytes,1,opt,name=networkConfigList,proto3" json:"networkConfigList,omitempty"`
	RuntimeConf       *RuntimeConf       `protobuf:"bytes,2,opt,name=runtimeConf,proto3" json:"runtimeConf,omitempty"`
}

func (x *DelNetworkListRequest) Reset() {
	*x = DelNetworkListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelNetworkListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelNetworkListRequest) ProtoMessage() {}

func (x *DelNetworkListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelNetworkListRequest.ProtoReflect.Descriptor instead.
func (*DelNetworkListRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{12}
}

func (x *DelNetworkListRequest) GetNetworkConfigList() *NetworkConfigList {
	if x != nil {
		return x.NetworkConfigList
	}
	return nil
}

func (x *DelNetworkListRequest) GetRuntimeConf() *RuntimeConf {
	if x != nil {
		return x.RuntimeConf
	}
	return nil
}

type DelNetworkListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelNetworkListReply) Reset() {
	*x = DelNetworkListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelNetworkListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelNetworkListReply) ProtoMessage() {}

func (x *DelNetworkListReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelNetworkListReply.ProtoReflect.Descriptor instead.
func (*DelNetworkListReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{13}
}

type CheckNetworkListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfigList *NetworkConfigList `protobuf:"bytes,1,opt,name=networkConfigList,proto3" json:"networkConfigList,omitempty"`
	RuntimeConf       *RuntimeConf       `protobuf:"bytes,2,opt,name=runtimeConf,proto3" json:"runtimeConf,omitempty"`
}

func (x *CheckNetworkListRequest) Reset() {
	*x = CheckNetworkListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNetworkListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNetworkListRequest) ProtoMessage() {}

func (x *CheckNetworkListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNetworkListRequest.ProtoReflect.Descriptor instead.
func (*CheckNetworkListRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{14}
}

func (x *CheckNetworkListRequest) GetNetworkConfigList() *NetworkConfigList {
	if x != nil {
		return x.NetworkConfigList
	}
	return nil
}

func (x *CheckNetworkListRequest) GetRuntimeConf() *RuntimeConf {
	if x != nil {
		return x.RuntimeConf
	}
	return nil
}

type CheckNetworkListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckNetworkListReply) Reset() {
	*x = CheckNetworkListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNetworkListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNetworkListReply) ProtoMessage() {}

func (x *CheckNetworkListReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNetworkListReply.ProtoReflect.Descriptor instead.
func (*CheckNetworkListReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{15}
}

type AddNetworkListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfigList *NetworkConfigList `protobuf:"bytes,1,opt,name=networkConfigList,proto3" json:"networkConfigList,omitempty"`
	RuntimeConf       *RuntimeConf       `protobuf:"bytes,2,opt,name=runtimeConf,proto3" json:"runtimeConf,omitempty"`
}

func (x *AddNetworkListRequest) Reset() {
	*x = AddNetworkListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNetworkListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNetworkListRequest) ProtoMessage() {}

func (x *AddNetworkListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNetworkListRequest.ProtoReflect.Descriptor instead.
func (*AddNetworkListRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{16}
}

func (x *AddNetworkListRequest) GetNetworkConfigList() *NetworkConfigList {
	if x != nil {
		return x.NetworkConfigList
	}
	return nil
}

func (x *AddNetworkListRequest) GetRuntimeConf() *RuntimeConf {
	if x != nil {
		return x.RuntimeConf
	}
	return nil
}

type AddNetworkListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddNetworkListReply) Reset() {
	*x = AddNetworkListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNetworkListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNetworkListReply) ProtoMessage() {}

func (x *AddNetworkListReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNetworkListReply.ProtoReflect.Descriptor instead.
func (*AddNetworkListReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{17}
}

func (x *AddNetworkListReply) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListNetworkListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNetworkListRequest) Reset() {
	*x = ListNetworkListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworkListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkListRequest) ProtoMessage() {}

func (x *ListNetworkListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkListRequest.ProtoReflect.Descriptor instead.
func (*ListNetworkListRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{18}
}

type ListNetworkListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfigList []*NetworkConfigList `protobuf:"bytes,1,rep,name=networkConfigList,proto3" json:"networkConfigList,omitempty"`
}

func (x *ListNetworkListReply) Reset() {
	*x = ListNetworkListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworkListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkListReply) ProtoMessage() {}

func (x *ListNetworkListReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkListReply.ProtoReflect.Descriptor instead.
func (*ListNetworkListReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{19}
}

func (x *ListNetworkListReply) GetNetworkConfigList() []*NetworkConfigList {
	if x != nil {
		return x.NetworkConfigList
	}
	return nil
}

type NetworkConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CniVersion   string           `protobuf:"bytes,2,opt,name=cniVersion,proto3" json:"cniVersion,omitempty"`
	DisableCheck bool             `protobuf:"varint,3,opt,name=disableCheck,proto3" json:"disableCheck,omitempty"`
	Plugins      []*NetworkConfig `protobuf:"bytes,4,rep,name=plugins,proto3" json:"plugins,omitempty"`
	Extra        []*anypb.Any     `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty"`
}

func (x *NetworkConfigList) Reset() {
	*x = NetworkConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfigList) ProtoMessage() {}

func (x *NetworkConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfigList.ProtoReflect.Descriptor instead.
func (*NetworkConfigList) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{20}
}

func (x *NetworkConfigList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkConfigList) GetCniVersion() string {
	if x != nil {
		return x.CniVersion
	}
	return ""
}

func (x *NetworkConfigList) GetDisableCheck() bool {
	if x != nil {
		return x.DisableCheck
	}
	return false
}

func (x *NetworkConfigList) GetPlugins() []*NetworkConfig {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *NetworkConfigList) GetExtra() []*anypb.Any {
	if x != nil {
		return x.Extra
	}
	return nil
}

// describes a network.
type NetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CniVersion   string          `protobuf:"bytes,1,opt,name=cniVersion,proto3" json:"cniVersion,omitempty"`
	Name         string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type         string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Capabilities map[string]bool `protobuf:"bytes,4,rep,name=capabilities,proto3" json:"capabilities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Ipam         *IPAM           `protobuf:"bytes,5,opt,name=ipam,proto3" json:"ipam,omitempty"`
	Dns          *DNS            `protobuf:"bytes,6,opt,name=dns,proto3" json:"dns,omitempty"`
	Extra        []*anypb.Any    `protobuf:"bytes,99,rep,name=extra,proto3" json:"extra,omitempty"`
}

func (x *NetworkConfig) Reset() {
	*x = NetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfig) ProtoMessage() {}

func (x *NetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfig.ProtoReflect.Descriptor instead.
func (*NetworkConfig) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{21}
}

func (x *NetworkConfig) GetCniVersion() string {
	if x != nil {
		return x.CniVersion
	}
	return ""
}

func (x *NetworkConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkConfig) GetCapabilities() map[string]bool {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *NetworkConfig) GetIpam() *IPAM {
	if x != nil {
		return x.Ipam
	}
	return nil
}

func (x *NetworkConfig) GetDns() *DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *NetworkConfig) GetExtra() []*anypb.Any {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IPAM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *IPAM) Reset() {
	*x = IPAM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAM) ProtoMessage() {}

func (x *IPAM) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAM.ProtoReflect.Descriptor instead.
func (*IPAM) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{22}
}

func (x *IPAM) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nameservers []string `protobuf:"bytes,1,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	Domain      string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Search      []string `protobuf:"bytes,3,rep,name=search,proto3" json:"search,omitempty"`
	Options     []string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *DNS) Reset() {
	*x = DNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNS) ProtoMessage() {}

func (x *DNS) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNS.ProtoReflect.Descriptor instead.
func (*DNS) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{23}
}

func (x *DNS) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *DNS) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNS) GetSearch() []string {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *DNS) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CniVersion string       `protobuf:"bytes,1,opt,name=cniVersion,proto3" json:"cniVersion,omitempty"`
	Interfaces []*Interface `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Ips        []*IPConfig  `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
	Routes     []*Route     `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty"`
	Dns        *DNS         `protobuf:"bytes,5,opt,name=dns,proto3" json:"dns,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{24}
}

func (x *Result) GetCniVersion() string {
	if x != nil {
		return x.CniVersion
	}
	return ""
}

func (x *Result) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Result) GetIps() []*IPConfig {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *Result) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Result) GetDns() *DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst *IPNet `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
	Gw  []byte `protobuf:"bytes,2,opt,name=gw,proto3" json:"gw,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{25}
}

func (x *Route) GetDst() *IPNet {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *Route) GetGw() []byte {
	if x != nil {
		return x.Gw
	}
	return nil
}

type IPNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	IpMask []byte `protobuf:"bytes,2,opt,name=ipMask,proto3" json:"ipMask,omitempty"`
}

func (x *IPNet) Reset() {
	*x = IPNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPNet) ProtoMessage() {}

func (x *IPNet) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPNet.ProtoReflect.Descriptor instead.
func (*IPNet) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{26}
}

func (x *IPNet) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *IPNet) GetIpMask() []byte {
	if x != nil {
		return x.IpMask
	}
	return nil
}

// IPConfig contains values necessary to configure an IP address on an interface
type IPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index into Result structs Interfaces list
	Interface int32  `protobuf:"varint,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Address   *IPNet `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Gateway   []byte `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *IPConfig) Reset() {
	*x = IPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPConfig) ProtoMessage() {}

func (x *IPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPConfig.ProtoReflect.Descriptor instead.
func (*IPConfig) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{27}
}

func (x *IPConfig) GetInterface() int32 {
	if x != nil {
		return x.Interface
	}
	return 0
}

func (x *IPConfig) GetAddress() *IPNet {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *IPConfig) GetGateway() []byte {
	if x != nil {
		return x.Gateway
	}
	return nil
}

// contains values about the created interfaces
type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mac     string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Sandbox string `protobuf:"bytes,3,opt,name=sandbox,proto3" json:"sandbox,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{28}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Interface) GetSandbox() string {
	if x != nil {
		return x.Sandbox
	}
	return ""
}

// A RuntimeConf holds the arguments to one invocation of a CNI plugin
// excepting the network configuration, with the nested exception that
// the `runtimeConfig` from the network configuration is included
// here.
type RuntimeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID string `protobuf:"bytes,1,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	NetNS       string `protobuf:"bytes,2,opt,name=NetNS,proto3" json:"NetNS,omitempty"`
	IfName      string `protobuf:"bytes,3,opt,name=IfName,proto3" json:"IfName,omitempty"`
	//Args        [][2]string
	// A dictionary of capability-specific data passed by the runtime
	// to plugins as top-level keys in the 'runtimeConfig' dictionary
	// of the plugin's stdin data.  libcni will ensure that only keys
	// in this map which match the capabilities of the plugin are passed
	// to the plugin
	CapabilityArgs map[string]*anypb.Any `protobuf:"bytes,5,rep,name=capabilityArgs,proto3" json:"capabilityArgs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RuntimeConf) Reset() {
	*x = RuntimeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeConf) ProtoMessage() {}

func (x *RuntimeConf) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeConf.ProtoReflect.Descriptor instead.
func (*RuntimeConf) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{29}
}

func (x *RuntimeConf) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *RuntimeConf) GetNetNS() string {
	if x != nil {
		return x.NetNS
	}
	return ""
}

func (x *RuntimeConf) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *RuntimeConf) GetCapabilityArgs() map[string]*anypb.Any {
	if x != nil {
		return x.CapabilityArgs
	}
	return nil
}

type ListNetworkConfigReply_NetworkConfigNameAndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType `protobuf:"varint,2,opt,name=type,proto3,enum=cni.v2.ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType" json:"type,omitempty"`
}

func (x *ListNetworkConfigReply_NetworkConfigNameAndType) Reset() {
	*x = ListNetworkConfigReply_NetworkConfigNameAndType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworkConfigReply_NetworkConfigNameAndType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkConfigReply_NetworkConfigNameAndType) ProtoMessage() {}

func (x *ListNetworkConfigReply_NetworkConfigNameAndType) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkConfigReply_NetworkConfigNameAndType.ProtoReflect.Descriptor instead.
func (*ListNetworkConfigReply_NetworkConfigNameAndType) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListNetworkConfigReply_NetworkConfigNameAndType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListNetworkConfigReply_NetworkConfigNameAndType) GetType() ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType {
	if x != nil {
		return x.Type
	}
	return ListNetworkConfigReply_NetworkConfigNameAndType_UNIVERSAL
}

var File_cni_proto protoreflect.FileDescriptor

var file_cni_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6e, 0x69,
	0x2e, 0x76, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1a,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xce, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x22, 0x55, 0x0a, 0x16, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6e, 0x69,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x3a, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x1a,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x11, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x89, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x69,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x13, 0x0a, 0x11,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0b,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x39, 0x0a, 0x0f, 0x41,
	0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x97, 0x01, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x3d, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x5f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xc8, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6e,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6e, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2f,
	0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12,
	0x2a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xd2, 0x02, 0x0a, 0x0d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6e, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6e, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6e,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x70, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x52, 0x04,
	0x69, 0x70, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x03,
	0x64, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x3f, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x1a, 0x0a, 0x04, 0x49, 0x50, 0x41, 0x4d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x03,
	0x44, 0x4e, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xc5, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6e,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6e, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x03, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6e, 0x69,
	0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x69, 0x70,
	0x73, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x4e, 0x53, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x22, 0x38, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x52, 0x03, 0x64, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x67,
	0x77, 0x22, 0x2f, 0x0a, 0x05, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70,
	0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x69, 0x70, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x6b, 0x0a, 0x08, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22,
	0x4b, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x22, 0x87, 0x02, 0x0a,
	0x0b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x65, 0x74, 0x4e, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e,
	0x65, 0x74, 0x4e, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0e,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x57, 0x0a,
	0x13, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x97, 0x06, 0x0a, 0x03, 0x43, 0x4e, 0x49, 0x12, 0x55,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6e, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6e, 0x69,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6e, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e,
	0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x19, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63,
	0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x19, 0x2e, 0x63, 0x6e,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x4f, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x1e, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x63, 0x6e, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cni_proto_rawDescOnce sync.Once
	file_cni_proto_rawDescData = file_cni_proto_rawDesc
)

func file_cni_proto_rawDescGZIP() []byte {
	file_cni_proto_rawDescOnce.Do(func() {
		file_cni_proto_rawDescData = protoimpl.X.CompressGZIP(file_cni_proto_rawDescData)
	})
	return file_cni_proto_rawDescData
}

var file_cni_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cni_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_cni_proto_goTypes = []interface{}{
	(ListNetworkConfigReply_NetworkConfigNameAndType_NetworkConfigType)(0), // 0: cni.v2.ListNetworkConfigReply.NetworkConfigNameAndType.NetworkConfigType
	(*ListNetworkConfigRequest)(nil),                                       // 1: cni.v2.ListNetworkConfigRequest
	(*ListNetworkConfigReply)(nil),                                         // 2: cni.v2.ListNetworkConfigReply
	(*ValidateNetworkRequest)(nil),                                         // 3: cni.v2.ValidateNetworkRequest
	(*ValidateNetworkReply)(nil),                                           // 4: cni.v2.ValidateNetworkReply
	(*ValidateNetworkListRequest)(nil),                                     // 5: cni.v2.ValidateNetworkListRequest
	(*ValidateNetworkListReply)(nil),                                       // 6: cni.v2.ValidateNetworkListReply
	(*DelNetworkRequest)(nil),                                              // 7: cni.v2.DelNetworkRequest
	(*DelNetworkReply)(nil),                                                // 8: cni.v2.DelNetworkReply
	(*CheckNetworkRequest)(nil),                                            // 9: cni.v2.CheckNetworkRequest
	(*CheckNetworkReply)(nil),                                              // 10: cni.v2.CheckNetworkReply
	(*AddNetworkRequest)(nil),                                              // 11: cni.v2.AddNetworkRequest
	(*AddNetworkReply)(nil),                                                // 12: cni.v2.AddNetworkReply
	(*DelNetworkListRequest)(nil),                                          // 13: cni.v2.DelNetworkListRequest
	(*DelNetworkListReply)(nil),                                            // 14: cni.v2.DelNetworkListReply
	(*CheckNetworkListRequest)(nil),                                        // 15: cni.v2.CheckNetworkListRequest
	(*CheckNetworkListReply)(nil),                                          // 16: cni.v2.CheckNetworkListReply
	(*AddNetworkListRequest)(nil),                                          // 17: cni.v2.AddNetworkListRequest
	(*AddNetworkListReply)(nil),                                            // 18: cni.v2.AddNetworkListReply
	(*ListNetworkListRequest)(nil),                                         // 19: cni.v2.ListNetworkListRequest
	(*ListNetworkListReply)(nil),                                           // 20: cni.v2.ListNetworkListReply
	(*NetworkConfigList)(nil),                                              // 21: cni.v2.NetworkConfigList
	(*NetworkConfig)(nil),                                                  // 22: cni.v2.NetworkConfig
	(*IPAM)(nil),                                                           // 23: cni.v2.IPAM
	(*DNS)(nil),                                                            // 24: cni.v2.DNS
	(*Result)(nil),                                                         // 25: cni.v2.Result
	(*Route)(nil),                                                          // 26: cni.v2.Route
	(*IPNet)(nil),                                                          // 27: cni.v2.IPNet
	(*IPConfig)(nil),                                                       // 28: cni.v2.IPConfig
	(*Interface)(nil),                                                      // 29: cni.v2.Interface
	(*RuntimeConf)(nil),                                                    // 30: cni.v2.RuntimeConf
	(*ListNetworkConfigReply_NetworkConfigNameAndType)(nil),                // 31: cni.v2.ListNetworkConfigReply.NetworkConfigNameAndType
	nil,               // 32: cni.v2.NetworkConfig.CapabilitiesEntry
	nil,               // 33: cni.v2.RuntimeConf.CapabilityArgsEntry
	(*anypb.Any)(nil), // 34: google.protobuf.Any
}
var file_cni_proto_depIdxs = []int32{
	31, // 0: cni.v2.ListNetworkConfigReply.network:type_name -> cni.v2.ListNetworkConfigReply.NetworkConfigNameAndType
	22, // 1: cni.v2.ValidateNetworkRequest.networkConfig:type_name -> cni.v2.NetworkConfig
	21, // 2: cni.v2.ValidateNetworkListRequest.networkConfigList:type_name -> cni.v2.NetworkConfigList
	22, // 3: cni.v2.DelNetworkRequest.networkConfig:type_name -> cni.v2.NetworkConfig
	30, // 4: cni.v2.DelNetworkRequest.runtimeConf:type_name -> cni.v2.RuntimeConf
	22, // 5: cni.v2.CheckNetworkRequest.networkConfig:type_name -> cni.v2.NetworkConfig
	30, // 6: cni.v2.CheckNetworkRequest.runtimeConf:type_name -> cni.v2.RuntimeConf
	22, // 7: cni.v2.AddNetworkRequest.networkConfig:type_name -> cni.v2.NetworkConfig
	30, // 8: cni.v2.AddNetworkRequest.runtimeConf:type_name -> cni.v2.RuntimeConf
	25, // 9: cni.v2.AddNetworkReply.result:type_name -> cni.v2.Result
	21, // 10: cni.v2.DelNetworkListRequest.networkConfigList:type_name -> cni.v2.NetworkConfigList
	30, // 11: cni.v2.DelNetworkListRequest.runtimeConf:type_name -> cni.v2.RuntimeConf
	21, // 12: cni.v2.CheckNetworkListRequest.networkConfigList:type_name -> cni.v2.NetworkConfigList
	30, // 13: cni.v2.CheckNetworkListRequest.runtimeConf:type_name -> cni.v2.RuntimeConf
	21, // 14: cni.v2.AddNetworkListRequest.networkConfigList:type_name -> cni.v2.NetworkConfigList
	30, // 15: cni.v2.AddNetworkListRequest.runtimeConf:type_name -> cni.v2.RuntimeConf
	25, // 16: cni.v2.AddNetworkListReply.result:type_name -> cni.v2.Result
	21, // 17: cni.v2.ListNetworkListReply.networkConfigList:type_name -> cni.v2.NetworkConfigList
	22, // 18: cni.v2.NetworkConfigList.plugins:type_name -> cni.v2.NetworkConfig
	34, // 19: cni.v2.NetworkConfigList.extra:type_name -> google.protobuf.Any
	32, // 20: cni.v2.NetworkConfig.capabilities:type_name -> cni.v2.NetworkConfig.CapabilitiesEntry
	23, // 21: cni.v2.NetworkConfig.ipam:type_name -> cni.v2.IPAM
	24, // 22: cni.v2.NetworkConfig.dns:type_name -> cni.v2.DNS
	34, // 23: cni.v2.NetworkConfig.extra:type_name -> google.protobuf.Any
	29, // 24: cni.v2.Result.interfaces:type_name -> cni.v2.Interface
	28, // 25: cni.v2.Result.ips:type_name -> cni.v2.IPConfig
	26, // 26: cni.v2.Result.routes:type_name -> cni.v2.Route
	24, // 27: cni.v2.Result.dns:type_name -> cni.v2.DNS
	27, // 28: cni.v2.Route.dst:type_name -> cni.v2.IPNet
	27, // 29: cni.v2.IPConfig.address:type_name -> cni.v2.IPNet
	33, // 30: cni.v2.RuntimeConf.capabilityArgs:type_name -> cni.v2.RuntimeConf.CapabilityArgsEntry
	0,  // 31: cni.v2.ListNetworkConfigReply.NetworkConfigNameAndType.type:type_name -> cni.v2.ListNetworkConfigReply.NetworkConfigNameAndType.NetworkConfigType
	34, // 32: cni.v2.RuntimeConf.CapabilityArgsEntry.value:type_name -> google.protobuf.Any
	1,  // 33: cni.v2.CNI.ListNetworkConfig:input_type -> cni.v2.ListNetworkConfigRequest
	19, // 34: cni.v2.CNI.ListNetworkList:input_type -> cni.v2.ListNetworkListRequest
	17, // 35: cni.v2.CNI.AddNetworkList:input_type -> cni.v2.AddNetworkListRequest
	15, // 36: cni.v2.CNI.CheckNetworkList:input_type -> cni.v2.CheckNetworkListRequest
	13, // 37: cni.v2.CNI.DelNetworkList:input_type -> cni.v2.DelNetworkListRequest
	5,  // 38: cni.v2.CNI.ValidateNetworkList:input_type -> cni.v2.ValidateNetworkListRequest
	11, // 39: cni.v2.CNI.AddNetwork:input_type -> cni.v2.AddNetworkRequest
	9,  // 40: cni.v2.CNI.CheckNetwork:input_type -> cni.v2.CheckNetworkRequest
	7,  // 41: cni.v2.CNI.DelNetwork:input_type -> cni.v2.DelNetworkRequest
	3,  // 42: cni.v2.CNI.ValidateNetwork:input_type -> cni.v2.ValidateNetworkRequest
	2,  // 43: cni.v2.CNI.ListNetworkConfig:output_type -> cni.v2.ListNetworkConfigReply
	20, // 44: cni.v2.CNI.ListNetworkList:output_type -> cni.v2.ListNetworkListReply
	18, // 45: cni.v2.CNI.AddNetworkList:output_type -> cni.v2.AddNetworkListReply
	16, // 46: cni.v2.CNI.CheckNetworkList:output_type -> cni.v2.CheckNetworkListReply
	14, // 47: cni.v2.CNI.DelNetworkList:output_type -> cni.v2.DelNetworkListReply
	6,  // 48: cni.v2.CNI.ValidateNetworkList:output_type -> cni.v2.ValidateNetworkListReply
	12, // 49: cni.v2.CNI.AddNetwork:output_type -> cni.v2.AddNetworkReply
	10, // 50: cni.v2.CNI.CheckNetwork:output_type -> cni.v2.CheckNetworkReply
	8,  // 51: cni.v2.CNI.DelNetwork:output_type -> cni.v2.DelNetworkReply
	4,  // 52: cni.v2.CNI.ValidateNetwork:output_type -> cni.v2.ValidateNetworkReply
	43, // [43:53] is the sub-list for method output_type
	33, // [33:43] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_cni_proto_init() }
func file_cni_proto_init() {
	if File_cni_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cni_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworkConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworkConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateNetworkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateNetworkListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateNetworkListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelNetworkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNetworkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNetworkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelNetworkListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelNetworkListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNetworkListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNetworkListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNetworkListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNetworkListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworkListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworkListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworkConfigReply_NetworkConfigNameAndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cni_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cni_proto_goTypes,
		DependencyIndexes: file_cni_proto_depIdxs,
		EnumInfos:         file_cni_proto_enumTypes,
		MessageInfos:      file_cni_proto_msgTypes,
	}.Build()
	File_cni_proto = out.File
	file_cni_proto_rawDesc = nil
	file_cni_proto_goTypes = nil
	file_cni_proto_depIdxs = nil
}
